// Объявим несколько переменных, которые нам пригодятся:

let number = 0
let text = ""
let condition = true

let a: Int = 1
let b: Int = 2
let c: Int = 3

// MARK: - Функции


// Функции - основная строительная единица, с помощью которой пишется программа.
// В swift функции записываются с помощью ключевого слова func, далее идет название
// функции (на ваше усмотрение), и пустые скобки. Потом в фигурных скобках мы указываем
// команды, которые будет выполнять эта функция:

func sayHelloWorldTwice() {
    print("Hello World!")
    print("Hello World!")
}

// Когда мы хотим вызвать функцию, мы пишем ее имя:
sayHelloWorldTwice()

// Функция выше выполнит print("Hello World!") дважды. В функциях мы можем вызывать
// другие функции любое количество раз. К примеру такая цепочка:

func some1() {
    some2()
}

func some2() {
    some3()
}

func some3() {
    some4()
}

func some4() {
    print("Hi, bro!")
}

// Функция 1 вызвала вторую, вторая третью: третья четвертую, а четвертая вывела "Hi, bro!".
// Таким образом если мы вызовем функцию 1, в консоль выведется "Hi, bro!"

some1()

// В функцию мы можем передать любое количество переменных. Пример: функция, которая
// принимает несколько переменных:

func collectAllDataTypes(someInt: Int, someString: String, someBool: Bool) {
    print(someInt)
    print(someString)
    print(someBool)
}

// Используем ранее объявленные переменные для вызова функции. Сам вызов будет выглядеть
// следующим образом:

collectAllDataTypes(someInt: number, someString: text, someBool: condition)

// Функции могут также возвращать тип данных. В таком случае нам нужно использовать после
// скобок знак стрелки: "->". А в теле функции мы должны указать что именно мы вернем
// после слова "return". Пример: функция c коротким названием sum, принимает два числа,
// а отдает их сумму:

func sum(value1: Int, value2: Int) -> Int {
    return value1 + value2
}

// Создадим переменную, вместо значения, сразу указав, что она равна сумме каких-то чисел
// с помощью функции sum:

var sumOfTwoValues: Int = sum(value1: a, value2: b)

// Когда мы вызываем функцию, компилятор подскажет нам, что мы должны туда передать значения,
// которые мы описали, объявляя функцию. Если мы хотим сказать, что какое-то значение можно
// передать, а можно не передать, то мы должны указать значение по умолчанию после
// знака = сразу после типа данных принимаемого значения.

func multiply(value1: Int, value2: Int = 0) -> Int {
    return value1 * value2
}

// Теперь вызывая функцию умножения multiply, мы можем не указать второй параметр. По
// умолчанию он будет равен нулю:

multiply(value1: c)

// И наконец, в функциях мы можем использовать маски параметров. Нам не обязательно внутри
// скобок писать что мы  передаем в функцию каждый раз при ее вызове. Усовершенствуем
// функцию sum, убрав необходимость при вызове писать value1 и value2. Для этого в качестве
// маски используем знак _. Маска указывается перед именем параметра:

func sum(_ value1: Int, _ value2: Int) -> Int {
    return value1 + value2
}

sum(a, b)

// Можем так же подменить value1 и value2 при вызове на firstParameter и secondParameter.
// В реальном коде это обычно используют когда параметр внутри функции можно назвать коротко
// "title", но при вызове мы хотим более красиво описать, что это за title.
// Например напишем функцию, которая выводит полное имя человека:

func display(fullNameOfUser name: String) {
    print(name)
}

display(fullNameOfUser: "Bob")



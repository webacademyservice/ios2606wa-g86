
// MARK: - Структуры (struct)

// Структуры очень похожи на классы (class), но имеют 2 ключевых отличия: структуры
// не поддерживают наследование и являются value type(подробнее ниже). Также структура
// не требует написания дефолтного инициализатора:


struct Human {
    let name: String
    var height: Int

    // Нам не обязательно писать init()
}

let girl = Human(name: "Алиса", height: 170)

// MARK: - Value type / Reference type

// Разные типы имеют разный формат хранения в памяти. Если мы работаем с примитивными
// типами swift (это структуры), такими как Int, String, Bool, мы можем быть уверены, что
// создав копию такой переменной, мы КОПИРУЕМ ее значение. Например:

var helloLine = "Hello world!"
let helloLineCopy = helloLine

// В последней строке произошло копирование и все дальнейшие изменения helloLine никак не
// будут затрагивать значение переменной helloLineCopy:

helloLine = "Hi!"

// Если мы выведем в консоль значение обеих переменных, они будут разными:

print(helloLine)
print(helloLineCopy)

// Это правило работает для всех структур, enum и tuple (будем изучать в дальнейшем), так
// как это все value types (типы - значения). К reference types (ссылочные типы) относятся
// class, func / closure(замыкание).

// Когда мы работаем с reference type, мы работаем с ссылкой на значение, а не самим
// значением. Если мы скажем что второй экземпляр класса равен первому, мы копируем ссылку
// на значение первого.

// Создадим аналогичный пример с классами:

var helloString = "Hello world!"
let helloStringCopy = helloString

// Меняем значение в helloString и выводим на экран, что храниться в обеих переменных:

helloString = "Hi!"

print(helloString)
print(helloStringCopy)

// В консоли мы видим, что значения одинаковые, так как ссылаются на один и тот же участок
// в памяти.

// Условно, с точки зрения компилятора мы можем изобразить значение helloString
// следующим образом: let helloString = 0x12345 -> "Hello world!". Набор символов после
// 0x.... является адресом(ссылкой).
// Пример реальной ссылки на класс UIViewController: 0x00007f8e50907150.

// Количество ссылок на 1 объект подсчитывает специальный механизм - ARC, так как память
// не может быть освобождена, пока на нее существует хотя бы одна(strong) ссылка.

// Про типы ссылок мы поговорим на следующих занятиях.

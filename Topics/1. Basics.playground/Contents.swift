// MARK: - Шорткаты (сочетания клавиш)

/*

 Откатиться на 1 изменение назад:  command shift Z
 Откатиться в обратную сторону на 1 изменение вперед:  command shift Z

 Выделить весь код в файле: command A
 Выровнять весь код в файле: control I

 Запустить проект: command R
 Остановить выполнение проекта: command .
 Запустить build проекта: command B
 Очистить кеш: command K

 */


// MARK: - Переменные и их объявление


/*
    В программировании мы оперируем данными. Мы все время создаем переменные и производим
 операции над ними.

    Переменные являются некими контейнерами, которые имеют определенный тип, например число
 или строка. При этом если значение в контейнере будет меняться, мы указываем ключевое
 слово var, или в обратном случае - ключевое слово let перед названием переменной.

    И что еще важно понимать, созданные нами переменные (контейнеры) занимают какое-то
 количество оперативной памяти. Даже если в переменной храниться цифра 1, она занимает
 столько же памяти, сколько и переменная со значением 1000000.
 */

// Создадим несколько переменных:

let minutesInHour: Int = 0

/*
Сейчас мы объявили переменную minutesInHour(количество минут в часе). Для этого мы указали:

 -  ключевое слово let, так как мы знаем, что количество минут в часе - неизменная величина
и в процессе выполнения программы мы не станем менять значение этой переменной.

 -  minutesInHour, это не часть "синтаксиса" swift, а придуманное нами значение.

 -  двоеточие означает, что далее будет указан тип переменной. Мы выбрали тип Int - число.

 -  равно означает, что мы присвоили переменной значение. Другими словами, положили число 0
 в наш контейнер.

 В случае, если мы не хотим указывать тип данных, а сразу положить значение, мы можем это
 сделать и компилятор (программа) будет понимать, что за тип там лежит. Например:
 */

let daysInWeek = 7

// Если мы захотим поменять значение daysInWeek на 10, компилятор не даст нам этого
// сделать, так как мы указали ключевое слово let. Теперь создадим переменную, значение
// которой мы сможем менять в дальнейшем. Для этого укажем ключевое слово var, вместо let:

var countOfApplesInBox = 0

// Мы назвали переменную countOfApplesInBox (количество яблок в коробке), давайте положим
// в эту коробку 5 яблок. Вызовем переменную и присвоим новое значение:

countOfApplesInBox = 5

/*
 Apple не просто так дала нам возможность создавать изменяемые и неизменяемые переменные.
 Когда мы будем работать в команде с другими программистами, объявление переменных как let
 поможет другим понять, что хранящиеся данные в этой переменной не должны быть изменены.
 К тому же Apple рекомендуем использовать let всегда, когда это возможно, так как это
 экономит ресурсы программы и ускоряет ее работу.
*/


// MARK: - Операции над переменными


// Над переменными разных типов можно выполнять разные операции:

var color: String = ""
let redColor: String = "Red Color"

color = redColor

// В этом примере мы создали переменную color и константу redColor.
// Они имеют тип String - строка. После чего присвоили color значение redColor.

let a = 5
let b = 10

// Получим сумму этих переменных:

let sum = a + b

// Их разницу:

let sub = a - b

// Результат умножения:

let mult = a * b

// Деления:

let div = a * b

// Остаток от деления:

let rem = a % b



// MARK: - Популярные ошибки



// Ошибка #1

/*
 Чаще всего во время написания кода мы используем фигурные скобки в разных конструкциях: { }

 Далее мы будем разбирать понятие Class, func, protocol и т д. Важно запомнить как можно
 раньше, что если мы пишем код внутри скобок, то он относится к одному объекту/оператору/типу

 Например мы напишем класс(class), в нем функцию(func) и структуру(func):
*/

class Apple {

    // Какой-то код

    func createIPhone() {
        // Какой-то код
    }
}

struct Google {
    // Какой-то код
}

/*

Если мы путаем скобки, и поместим структуру в класс, мы получим ошибку. Например:

 class Apple {

     // Какой-то код

     func createIPhone() {
         // Какой-то код
     }

 struct Google {
     // Какой-то код
 }
 }

Такой код работать не будет. Навыки не забывать об открытых скобках и соблюдать вложенность
 (функции всегда внутри каких-то скобок) критически важны при программировании.
 */




